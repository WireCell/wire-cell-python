#+title: Hybrid UNet-GNN Model

* General Description

* Miscellaneous 
The map between electronics channels and readout elements (here called 'wires' but a more accurate term would be 'rays' i.e. from raygrid) is determined from the database (store) holding the wires schema loaded from a file. The ident of the wire in the schema store is the ray number in its plane. In other words, the wires are ordered by this number. An early bug caused reordering of channels due to neglecting to account for this. As you can see in this python printout of the store, the first 2 induction planes on either face of this anode is aranged in descending order. 

#+begin_example
>>> from wirecell.util.wires import schema, persist
>>> store = persist.load('/home/jacob/protodunevd-wires-larsoft-v3.json.bz2')
>>> for i in range(6): #print(i, store.planes[i].wires[0], store.planes[i].wires[-1])
...   w0 =  store.planes[i].wires[0]
...   wl = store.planes[i].wires[-1]
...   print(i, store.planes[i].wires[0], store.planes[i].wires[-1], store.wires[w0].ident, store.wires[wl].ident)
... 
0 572 190 286 0
1 1337 1718 0 285
2 2584 2875 0 291
3 381 0 285 0
4 1146 1528 0 286
5 2292 2583 0 291
#+end_example

Originally, I had ordered the wire.ident <--> elec. channel map by the index of the wires in the store planes, not by the ident (see the commented lines below).
#+begin_example
for i, face in enumerate(self.faces):
    for jj, j in enumerate(face.planes):
        plane = store.planes[j]
        # wire_chans = []
        wire_chans = torch.zeros((len(plane.wires), 2), dtype=int)
        for wi in plane.wires:
            wire = store.wires[wi]
            # wire_chans.append([wire.ident, chanmap[wire.channel]]) #convert from larsoft
            wire_chans[wire.ident, 0] = wire.ident
            wire_chans[wire.ident, 1] = chanmap[wire.channel]
        # self.face_plane_wires_channels[(i,jj)] = torch.tensor(wire_chans, dtype=int)
        self.face_plane_wires_channels[(i,jj)] = torch.tensor(wire_chans, dtype=int)
#+begin_example
